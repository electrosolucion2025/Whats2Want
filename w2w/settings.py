"""
Django settings for w2w project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv, find_dotenv # type: ignore
import dj_database_url # type: ignore

# Load .env
load_dotenv(find_dotenv())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", default="True")

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "admin_interface",
    "colorfield",  # Requerido por django-admin-interface
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'core',
    'apps.menu',
    'apps.orders',
    'apps.whatsapp',
    'apps.chat',
    'apps.assistant',
    'apps.payments',
    'apps.printers',
    'apps.tenants',
    'apps.promotions',
    'apps.vip',
    'corsheaders',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',  # Usa tokens en cada request
        'rest_framework.authentication.SessionAuthentication',  # Para acceso desde el admin
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Bloquea acceso anónimo por defecto
    ],
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'w2w.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'w2w.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql',
#        'NAME': os.getenv('DB_NAME'),
#        'USER': os.getenv('DB_USER'),
#        'PASSWORD': os.getenv('DB_PASSWORD'),
#        'HOST': os.getenv('DB_HOST', 'localhost'),
#        'PORT': os.getenv('DB_PORT', 5432),
#        'CONN_MAX_AGE': 0,  # Cierra conexiones después de cada consulta
#    }
#}

DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('DATABASE_URL'),
        conn_max_age=0
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REDSYS = {
    "MERCHANT_CODE": os.getenv("REDSYS_MERCHANT_CODE", default="XXXXXXXX"),
    "TERMINAL": os.getenv("REDSYS_TERMINAL", default="1"),
    "SECRET_KEY": os.getenv("REDSYS_SECRET_KEY"),
    "CURRENCY": os.getenv("REDSYS_CURRENCY", default="978"),  # Código de moneda (978 = Euro)
    "URL_REDSYS": os.getenv("REDSYS_URL_REDSYS", default="https://sis.redsys.es/sis/realizarPago"),
    "URL_NOTIFY": os.getenv("REDSYS_URL_NOTIFY", default="https://tudominio.com/payments/redsys/notify/"),
    "URL_OK": os.getenv("REDSYS_URL_OK", default="https://tudominio.com/payments/success/"),
    "URL_KO": os.getenv("REDSYS_URL_KO", default="https://tudominio.com/payments/failure/"),
}

CSRF_TRUSTED_ORIGINS = [
    'http://localhost',   # Permitir desde localhost
    'http://127.0.0.1',   # Permitir acceso local
    'http://whats2want.up.railway.app',  # Permitir desde un dominio real (cuando despliegues)
    'https://whats2want.up.railway.app',
    'http://whats2want.onrender.com',
    'https://whats2want.onrender.com',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Si usas React en desarrollo
    "http://127.0.0.1:8000",  # Backend local
    "https://whats2want.up.railway.app",  # Dominio en producción
    "https://whats2want.onrender.com",
]

CSRF_COOKIE_SECURE = False  # No requiere HTTPS en desarrollo
CSRF_COOKIE_HTTPONLY = False  # Permitir acceso desde el frontend
CSRF_USE_SESSIONS = False  # Asocia el CSRF a la sesión del usuario

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

USE_L10N = True

# Habilitar selección de idioma en el Admin
LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/



STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Donde Django guardará los archivos

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# SENDGRID
# 📧 Configuración de SendGrid
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")
SENDGRID_FROM_EMAIL = os.getenv("SENDGRID_FROM_EMAIL")

# Opcionales
SENDGRID_SANDBOX_MODE_IN_DEBUG = False  # En True para pruebas sin enviar correos reales
SENDGRID_ECHO_TO_STDOUT = False  # En True para ver los correos en consola
